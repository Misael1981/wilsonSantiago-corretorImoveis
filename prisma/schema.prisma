generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  name       String?
  email      String?     @unique
  emailVerified DateTime? @map("email_verified")
  image      String?
  surname    String?
  password   String?
  phone      String?
  avatar     String?
  role       Role       @default(USER)
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  articles   Article[]
  contacts   Contact[]
  favorites  Favorite[]
  properties Property[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Property {
  id              String            @id @default(cuid())
  codRef          Int               @unique

  title           String
  description     String?
  address         String?
  number          String?
  complement      String?
  neighborhood    String
  city            String
  state           String
  zipCode         String?
  price           Float
  area            Float?
  bedrooms        Int
  bathrooms       Int
  garageSpaces    Int               @default(0)
  type            PropertyType
  status          PropertyStatus    @default(ACTIVE)
  imageUrls       String[]
  views           Int               @default(0)
  featured        Boolean           @default(false)
  deletedAt       DateTime?
  slug            String?           @unique
  metaTitle       String?
  metaDescription String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdById     String
  history         PropertyHistory[]
  contacts        Contact[]
  favorites       Favorite[]
  createdBy       User              @relation(fields: [createdById], references: [id])

  @@index([type, status])
  @@index([city, neighborhood])
  @@index([price])
  @@index([featured, createdAt])
  @@index([slug])
  @@map("properties")
}

model PropertyHistory {
  id         String   @id @default(cuid())
  propertyId String
  field      String
  oldValue   String?
  newValue   String?
  changedBy  String
  changedAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id])
}

model Article {
  id              String       @id @default(cuid())
  title           String
  content         String
  excerpt         String?
  slug            String       @unique
  imageUrl        String?
  published       Boolean      @default(false)
  featured        Boolean      @default(false)
  views           Int          @default(0)
  readTime        Int?
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publishedAt     DateTime?
  authorId        String
  tags            ArticleTag[]
  author          User         @relation(fields: [authorId], references: [id])

  @@index([published, publishedAt])
  @@index([featured, publishedAt])
  @@index([slug])
  @@index([authorId])
  @@map("articles")
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  description String?
  color       String?
  articles    ArticleTag[]

  @@map("tags")
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  testimonial String
  photo       String?
  rating      Int      @default(5)
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  occupation  String?
  location    String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, order])
  @@map("customers")
}

model Favorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("favorites")
}

model ListingRequest {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String
  city        String
  state       String?
  type        PropertyType
  title       String
  description String?
  price       Float?
  area        Float?
  bedrooms    Int?
  imageUrls   String[] @default([])
  source      String?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  status      ListingStatus @default(PENDING)

  @@index([status, createdAt])
  @@map("listing_requests")
}

model PropertyRequest {
  id             String   @id @default(cuid())
  name           String
  phone          String
  type           PropertyType
  city           String
  neighborhood   String?
  minPrice       Float?
  maxPrice       Float?
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  status         PropertyRequestStatus @default(PENDING)
  source         String?

  @@index([status, createdAt])
  @@index([type])
  @@index([city])
  @@map("property_requests")
}


model Contact {
  id           String        @id @default(cuid())
  name         String
  email        String
  phone        String?
  message      String
  type         ContactType   @default(GENERAL)
  status       ContactStatus @default(PENDING)
  source       String?
  propertyId   String?
  assignedToId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assignedTo   User?         @relation(fields: [assignedToId], references: [id])
  property     Property?     @relation(fields: [propertyId], references: [id])

  @@index([status, createdAt])
  @@index([type])
  @@map("contacts")
}

model SiteConfig {
  id          String     @id @default(cuid())
  key         String     @unique
  value       String
  description String?
  type        ConfigType @default(TEXT)
  updatedAt   DateTime   @updatedAt

  @@map("site_config")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PropertyType {
  CASA
  APARTAMENTO
  TERRENO
  LOJA
  CHACARA
  SITIO
  GALPAO
  SALA_COMERCIAL
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  SPECIAL_CONDITION
  INACTIVE
  RESERVED
}

enum ListingStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
}

enum PropertyRequestStatus {
  PENDING
  CONTACTED
  COMPLETED
  CANCELLED
}


enum ContactType {
  GENERAL
  PROPERTY_INQUIRY
  VALUATION
  PARTNERSHIP
  COMPLAINT
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ConfigType {
  TEXT
  NUMBER
  BOOLEAN
  JSON
  URL
  EMAIL
}
