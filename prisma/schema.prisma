generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== BANNERS DO CAROUSEL =====
model CarouselBanner {
  id           String   @id @default(cuid())
  imageMobile  String
  imageTablet  String
  imageDesktop String
  imageLaptop  String
  title        String
  description  String
  order        Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([order, isActive])
  @@map("carousel_banners")
}

// ===== PRODUTOS =====
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  type        String
  tags        String[]
  colors      String[]
  brand       String
  price       Float
  salePrice   Float?
  height      Float
  width       Float
  length      Float
  weight      Float
  imageUrl    String[]
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  packaging   ProductPackaging[]

  @@index([type, isAvailable])
  @@index([slug])
  @@map("products")
}

// ===== EMBALAGENS DOS PRODUTOS =====
model ProductPackaging {
  id                  String  @id @default(cuid())
  quantityPerPackage  Int
  packagePerBox       Int
  unitLabel           String
  price               Float
  salePrice           Float?
  boxHeight           Float
  boxWidth            Float
  boxLength           Float
  boxWeight           Float
  
  // Relacionamento
  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String

  @@map("product_packaging")
}

// ===== USUÁRIOS =====
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  surname   String?
  password  String   // Campo adicionado para autenticação
  phone     String?
  avatar    String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  properties Property[]
  articles   Article[]
  favorites  Favorite[]
  contacts   Contact[]

  @@map("users")
}

// ===== IMÓVEIS =====
model Property {
  id            String         @id @default(cuid())
  title         String
  description   String?
  address       String
  neighborhood  String
  city          String
  state         String
  zipCode       String?
  price         Float
  area          Float
  bedrooms      Int
  bathrooms     Int
  garageSpaces  Int            @default(0)
  type          PropertyType
  status        PropertyStatus @default(ACTIVE)
  imageUrls     String[]
  views         Int            @default(0)
  featured      Boolean        @default(false)
  
  // SEO
  slug          String?        @unique
  metaTitle     String?
  metaDescription String?
  
  // Coordenadas para mapas
  latitude      Float?
  longitude     Float?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relacionamentos
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
  favorites   Favorite[]
  contacts    Contact[]

  // Índices para performance
  @@index([type, status])
  @@index([city, neighborhood])
  @@index([price])
  @@index([featured, createdAt])
  @@index([slug])
  @@map("properties")
}

// ===== BLOG/ARTIGOS =====
model Article {
  id          String   @id @default(cuid())
  title       String
  content     String   // Texto completo do artigo
  excerpt     String?  // Resumo para listagens
  slug        String   @unique // URL amigável
  imageUrl    String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  readTime    Int?     // Tempo estimado de leitura em minutos
  
  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[] // Array de palavras-chave
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relacionamentos
  author   User         @relation(fields: [authorId], references: [id])
  authorId String
  tags     ArticleTag[]

  // Índices para performance e busca
  @@index([published, publishedAt])
  @@index([featured, publishedAt])
  @@index([slug])
  @@index([authorId])
  @@map("articles")
}

model Tag {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String? // Cor hexadecimal para UI
  
  articles ArticleTag[]
  
  @@map("tags")
}

model ArticleTag {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@id([articleId, tagId])
  @@map("article_tags")
}

// ===== DEPOIMENTOS DE CLIENTES =====
model Customer {
  id          String   @id @default(cuid())
  name        String
  testimonial String
  photo       String?
  rating      Int      @default(5)
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  occupation  String?  // Profissão do cliente
  location    String?  // Cidade do cliente
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, order])
  @@map("customers")
}

// ===== FAVORITOS =====
model Favorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // Relacionamentos
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  @@unique([userId, propertyId])
  @@map("favorites")
}

// ===== CONTATOS/LEADS =====
model Contact {
  id          String      @id @default(cuid())
  name        String
  email       String
  phone       String?
  message     String
  type        ContactType @default(GENERAL)
  status      ContactStatus @default(PENDING)
  source      String?     // De onde veio o lead (site, WhatsApp, etc.)
  
  // Relacionamento opcional com imóvel
  property    Property? @relation(fields: [propertyId], references: [id])
  propertyId  String?
  
  // Relacionamento com usuário que vai atender
  assignedTo  User?     @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status, createdAt])
  @@index([type])
  @@map("contacts")
}

// ===== CONFIGURAÇÕES DO SITE =====
model SiteConfig {
  id          String @id @default(cuid())
  key         String @unique // Ex: "site_title", "contact_email", etc.
  value       String
  description String?
  type        ConfigType @default(TEXT)
  
  updatedAt   DateTime @updatedAt

  @@map("site_config")
}

// ===== ENUMS =====
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PropertyType {
  CASA
  APARTAMENTO
  TERRENO
  LOJA
  CHACARA
  SITIO
  GALPAO
  SALA_COMERCIAL
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  INACTIVE
  RESERVED
}

enum ContactType {
  GENERAL
  PROPERTY_INQUIRY
  VALUATION
  PARTNERSHIP
  COMPLAINT
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ConfigType {
  TEXT
  NUMBER
  BOOLEAN
  JSON
  URL
  EMAIL
}
